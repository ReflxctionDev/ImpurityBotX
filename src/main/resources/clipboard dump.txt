
            /*for (Member m : GuildUtils.members()) {
                final User u = m.getUser();
                int pexp = exp.getUserExp(u);
                int level = pexp / 1000;
                int remaining = pexp % 1000;
                while (remaining > 1000) {
                    lvl.setUserLevel(u, level + 1);
                    exp.setUserExp(u, exp.getUserRemExp(u) - 1000);
                    exp.setUserNextExp(u, 1000);
                }
                lvl.setUserLevel(u, level);
                exp.setUserExp(u, pexp);
            }
            for (Member m : GuildUtils.members()) {
                if (igns.hasAssignedIgn(m.getUser())) {
                    if (!m.getUser().isBot()) {
                        GuildUtils.controller().removeSingleRoleFromMember(m, Roles.UNREGISTERED).queue();
                    } else {
                        if (!m.getUser().isBot()) {
                            GuildUtils.controller().addSingleRoleToMember(m, Roles.UNREGISTERED).queue();
                        }
                    }
                }
                if(m.getUser().isBot()) {
                    GuildUtils.controller().removeSingleRoleFromMember(m, Roles.UNREGISTERED).queue();
                }
            }
        */


        /*User u = m.getUser();
                    PreparedStatement ps = getConnection().prepareStatement("INSERT INTO ImpuritySSH (id, name, exp, level, ign, warnings) VALUES (?, ?, ?, ?, ?, ?);");
                    int exp, level, warnings;
                    exp = getExp(u);
                    level = getLevel(u);
                    warnings = getWarnings(u);
                    String ign = getIGN(u);
                    ps.setLong(1, u.getIdLong());
                    ps.setString(2, u.getName());
                    ps.setLong(3, exp);
                    ps.setInt(4, level);
                    ps.setString(5, ign == null ? "NO IGN" : ign);
                    ps.setInt(6, warnings);
                    ps.executeUpdate();*/


    @Override
    public void process(JDA j, Guild g, Message m, MessageChannel c, User u, String[] args) {
        if (args.length != 2) {
            c.sendMessage("**Incorrect command usage. Try " + getUsage() + "**.").queue();
            return;
        }
        int parsed;
        try {
            parsed = Integer.parseInt(args[1]);
        } catch (Exception e) {
            c.sendMessage("**Please enter a number at field 'amount'").queue();
            return;
        }
        try {
            String id = StringUtils.mentionToId(args[0]);
            User target = j.getUserById(id);
            manager.setUserPoints(target, parsed);
            AssignRanking assignRanking = new AssignRanking(g.getMember(target), manager.getLevel(u));
            assignRanking.assignRating();
            c.sendMessage("**Set " + target.getName() + "'s points to " + manager.getUserPoints(u) + "**.").queue();
        } catch (NumberFormatException ex) {
            c.sendMessage("**Expected a user mention (or id), but found** `" + args[0] + "`**!**").queue();
        }
    }